{"version":3,"sources":["components/Selectors.js","store/actions/selectors.js","components/FilterBox.js","store/actions/table.js","services/swAPI.js","services/filters.js","components/Table.js","store/actions/index.js","App.js","serviceWorker.js","store/reducers/swPlanets.js","store/reducers/selectors.js","store/reducers/table.js","store/reducers/index.js","store/index.js","index.js"],"names":["Selectors","selects","i","setSelectedValues","filters","filtersColumns","length","rest","map","numeric_values","column","className","id","onChange","e","value","includes","key","type","placeholder","connect","selectedValues","selectors","table","dispatch","target","comparison","selectedValue","setSessionStorage","defaultProps","results","data","resultsByName","setNewFilter","filter","parentNode","firstChild","selectedIndex","childNodes","lastChild","addFilters","filterButton","removeFilter","event","index","getRemoveFilter","numericValues","onClick","getCurrentSwPlanets","fetch","then","response","json","ok","Promise","resolve","reject","filterByName","name","planet","toLowerCase","match","switchFilters","filterByColumn","parseInt","switchFiltersNum","forEach","numFilters","switchFiltersAll","Table","this","props","setResultsByName","setAscendingColumn","order","filterOrder","Object","keys","toUpperCase","residentsIndex","findIndex","element","filmsIndex","urlIndex","elements","values","isFetching","getFilterByName","orderedArray","newArray","slice","sort","firstPosition","secondPosition","orderColumn","htmlFor","tableHead","tableBody","Component","newOrder","ascendingOrder","getAscendingColumn","receiveResults","createResults","planets","error","receiveSWplanetsFailure","message","receiveFilterByName","App","Boolean","window","location","hostname","INITIAL_SW_PLANETS_STATE","state","action","INITIAL_SELECTOR_STATE","filtersValues","caseFilterByName","caseRemoveFilter","removedFilter","removedIndex","item","removeFilters","rootReducer","combineReducers","store","createStore","reducer","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.44ee3bd0.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport './Selectors.css';\n\nimport { setSessionStorage } from '../store/actions/selectors';\n\nconst Selectors = (\n  {\n    selects, i, setSelectedValues, filters,\n  },\n) => {\n  let filtersColumns = [];\n  if (filters.length > 1) {\n    const [, ...rest] = filters;\n    filtersColumns = !rest.length\n      ? rest\n      : rest.map(({ numeric_values: { column } }) => column);\n  }\n  return (\n    <div className=\"select-container\">\n      <div className=\"select\">\n        <select id=\"values\" className=\"custom-select\" onChange={(e) => setSelectedValues(e, i)}>\n          {\n            i === 0\n              ? <option className=\"select-column\" value=\"\">Todos</option>\n              : <option className=\"select-comparison\" value=\"\">Escolha um comparador</option>\n          }\n          {\n            selects.map((value) => (filtersColumns.includes(value)\n              ? null\n              : <option value={value} key={value}>{value}</option>))\n          }\n        </select>\n      </div>\n      <div className=\"filter-number-content\">\n        {i === 1 ? <input\n          className=\"input-filter-number\"\n          type=\"number\"\n          placeholder=\"Digite um valor numerico\"\n          onChange={(e) => setSelectedValues(e, 2)}\n        /> : ''}\n      </div>\n    </div>\n  );\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  setSelectedValues: (e, i) => dispatch(setSessionStorage(e, i)),\n});\n\nconst mapStateToProps = ({\n  selectors: {\n    selectedValues,\n  },\n  table: {\n    filters,\n  },\n}) => ({\n  filters,\n  selectedValues,\n});\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Selectors);\n\nSelectors.propTypes = {\n  setSelectedValues: PropTypes.func.isRequired,\n  selects: PropTypes.instanceOf(Array).isRequired,\n  i: PropTypes.number.isRequired,\n  filters: PropTypes.instanceOf(Array).isRequired,\n};\n\nSelectors.defaultProps = {\n};\n","export const COLUMN_VALUES = 'COLUMN_VALUES';\nexport const COMPARISON_VALUES = 'COMPARISON_VALUES';\nexport const VALUES = 'VALUES';\nexport const RESET_STATE_SELECTORS = 'RESET_STATE_SELECTORS';\n\nconst selectedColumn = (column) => ({\n  type: COLUMN_VALUES,\n  selectedValues: { column },\n});\n\nconst selectedComparison = (comparison) => ({\n  type: COMPARISON_VALUES,\n  selectedValues: { comparison },\n});\n\nconst selectedValue = (value) => ({\n  type: VALUES,\n  selectedValues: { value },\n});\n\nexport const resetStateSelectors = () => ({\n  type: RESET_STATE_SELECTORS,\n  selectedValues: { column: '', comparison: '', value: 0 },\n});\n\nexport const setSessionStorage = ({ target: { value } }, i) => {\n  if (i === 0) {\n    return (dispatch) => (\n      dispatch(selectedColumn(value))\n    );\n  }\n  if (i === 1) {\n    return (dispatch) => (\n      dispatch(selectedComparison(value))\n    );\n  }\n  if (i === 2) {\n    return (dispatch) => (\n      dispatch(selectedValue(value))\n    );\n  }\n\n  return null;\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { filterButton, getRemoveFilter } from '../store/actions/table';\n\nconst FilterBox = ({\n  setNewFilter, selectedValues, results, resultsByName, filters, removeFilter,\n}) => {\n  const { column, comparison, value } = selectedValues;\n  const [, ...numericValues] = filters;\n  return (\n    <div>\n      {(column && comparison && value)\n        ? <button\n          className=\"filter-button\"\n          type=\"button\"\n          onClick={(e) => setNewFilter(selectedValues, results, resultsByName, e)}\n        >\n          Clique para filtrar\n        </button>\n        : <div />}\n      {!numericValues.length\n        ? numericValues\n        : numericValues.map(({ numeric_values }, i) => (\n          <div className=\"clear-filter-container\" key={numeric_values.column}>\n            <button\n              key={numeric_values.column}\n              id={i}\n              type=\"button\"\n              onClick={(e) => removeFilter(e, results)}\n            >\n              X\n            </button>\n            {`${numeric_values.column} | ${numeric_values.comparison} | ${numeric_values.value}`}\n          </div>\n        ))}\n    </div>\n  );\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  setNewFilter: (selectedValues, results, resultsByName, e) => dispatch(\n    filterButton(selectedValues, results, resultsByName, e),\n  ),\n  removeFilter: (e, results) => dispatch(getRemoveFilter(e, results)),\n});\n\nconst mapStateToProps = ({\n  selectors: {\n    selectedValues,\n  },\n  data: {\n    results,\n  },\n  table: {\n    resultsByName,\n    filters,\n  },\n}) => ({\n  selectedValues,\n  results,\n  resultsByName,\n  filters,\n});\n\nFilterBox.propTypes = {\n  selectedValues: PropTypes.instanceOf(Object).isRequired,\n  setNewFilter: PropTypes.func.isRequired,\n  results: PropTypes.instanceOf(Array).isRequired,\n  resultsByName: PropTypes.instanceOf(Array).isRequired,\n  filters: PropTypes.instanceOf(Array).isRequired,\n  removeFilter: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FilterBox);\n","import { resetStateSelectors } from './selectors';\n\nexport const FILTER_BY_NAME = 'FILTER_BY_NAME';\nexport const CREATE_RESULTS = 'CREATE_RESULTS';\nexport const ADD_FILTERS = 'ADD_FILTERS';\nexport const REMOVE_FILTER = 'REMOVE_FILTER';\nexport const ASC_DESC_ORDER = 'ASC_DESC_ORDER';\n\nconst receiveResults = (results) => ({\n  type: CREATE_RESULTS,\n  results,\n});\n\nconst receiveFilterByName = (name, results) => ({\n  type: FILTER_BY_NAME,\n  results,\n  filters: [{ name }],\n});\n\nconst addFilters = ({ column, comparison, value }, results, resultsByName) => ({\n  type: ADD_FILTERS,\n  resultsByName,\n  results,\n  filters: [{ numeric_values: { column, comparison, value } }],\n});\n\nconst removeFilter = (index, results) => ({\n  type: REMOVE_FILTER,\n  results,\n  index,\n});\n\nconst ascendingOrder = (column, order) => ({\n  type: ASC_DESC_ORDER,\n  filter: {\n    column,\n    order,\n  },\n});\n\nexport function createResults(results) {\n  return (dispatch) => (\n    dispatch(receiveResults(results))\n  );\n}\n\nexport function filterByName({ target: { value } }, results) {\n  return (dispatch) => (\n    dispatch(receiveFilterByName(value.toLowerCase(), results))\n  );\n}\n\nexport function filterButton(filter, results, resultsByName, e) {\n  e.target.parentNode.parentNode.parentNode.firstChild.firstChild.firstChild.selectedIndex = 0;\n  e.target.parentNode.parentNode.parentNode.childNodes[1].firstChild.lastChild.selectedIndex = 0;\n  e.target.parentNode.parentNode.parentNode.childNodes[1].lastChild.firstChild.value = null;\n\n  return (dispatch) => {\n    dispatch(addFilters(filter, results, resultsByName));\n    dispatch(resetStateSelectors());\n  };\n}\n\nexport function getRemoveFilter(event, results) {\n  const index = event.target.id;\n  return (dispatch) => (\n    dispatch(removeFilter((index), results))\n  );\n}\n\nexport function getAscendingColumn(event, order) {\n  const column = event.target.value;\n  const newOrder = order === 'ASC' ? 'DESC' : 'ASC';\n  return (dispatch) => (\n    dispatch(ascendingOrder(column, newOrder))\n  );\n}\n","const SW_BASE_API = 'https://swapi.co/api';\n\nconst getCurrentSwPlanets = () => (\n  fetch(`${SW_BASE_API}/planets`)\n    .then((response) => (\n      response\n        .json()\n        .then((json) => (response.ok ? Promise.resolve(json) : Promise.reject(json)))\n    ))\n);\n\nexport default getCurrentSwPlanets;\n","const filterByName = (name, results) => (\n  results.filter((planet) => planet.name.toLowerCase().match(name))\n);\n\nexport const switchFilters = (filterByColumn, comparison, column, value) => {\n  switch (comparison) {\n    case 'maior que':\n      return filterByColumn.filter((planet) => planet[column] > parseInt(value, 10));\n    case 'menor que':\n      return filterByColumn.filter((planet) => planet[column] < parseInt(value, 10));\n    case 'igual a':\n      return filterByColumn.filter((planet) => planet[column] === value);\n    default:\n      return filterByColumn;\n  }\n};\n\nexport const switchFiltersNum = (results, comparison, column, value, filters) => {\n  let filterByColumn = filterByName(filters[0].name, results) || results;\n  filters.forEach((filter) => {\n    if (filter.numeric_values) {\n      filterByColumn = switchFilters(\n        filterByColumn,\n        filter.numeric_values.comparison,\n        filter.numeric_values.column,\n        filter.numeric_values.value,\n      );\n    }\n  });\n  return filterByColumn;\n};\n\nconst switchFiltersAll = (results, comparison, resultsByName, column, value, filters) => {\n  let filterByColumn = resultsByName;\n  if (filters[0].name) {\n    filterByColumn = switchFiltersNum(results, comparison, column, value, filters);\n  }\n  return switchFilters(filterByColumn, comparison, column, value);\n};\n\n\nexport const numFilters = (results, filters, resultsByName) => {\n  const { column, comparison, value } = filters[filters.length - 1].numeric_values\n    || { column: '', comparison: '', value: 0 };\n  if (column && comparison && value) {\n    return switchFiltersAll(results, comparison, resultsByName, column, value, filters);\n  }\n  return filterByName(filters[0].name, results);\n};\n\nexport const removeFilters = (removedFilter, filters) => {\n  const removedIndex = parseInt(removedFilter, 10) + 1;\n  return (\n    filters.filter((item, index) => {\n      if (index === removedIndex) {\n        return false;\n      }\n\n      return true;\n    }));\n};\n\nexport function orderColumn(resultsByName, column, order) {\n  const newArray = resultsByName.slice();\n\n  if (order === 'ASC') {\n    return newArray.sort((firstPosition, secondPosition) => (\n      firstPosition[column] > secondPosition[column] ? 1 : -1\n    ));\n  }\n  return newArray.sort((firstPosition, secondPosition) => (\n    firstPosition[column] < secondPosition[column] ? 1 : -1\n  ));\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Selectors from './Selectors';\nimport FilterBox from './FilterBox';\nimport './Table.css';\n\nimport { fetchSWplanets } from '../store/actions';\nimport { orderColumn } from '../services/filters';\nimport { filterByName, createResults, getAscendingColumn } from '../store/actions/table';\n\nclass Table extends Component {\n  componentDidMount() {\n    const { getCurrentSwPlanets, setResultsByName } = this.props;\n\n    getCurrentSwPlanets()\n      .then(({ results }) => setResultsByName(results));\n  }\n\n  tableHead(resultsByName) {\n    const { setAscendingColumn, filterOrder } = this.props;\n    const { order } = filterOrder;\n\n    return (\n      <thead>\n        <tr>\n          {Object.keys(resultsByName[0] || []).map((keys) => {\n            if (keys !== 'residents' && keys !== 'films' && keys !== 'url') {\n              return (\n                <th className=\"table-index-content\" key={keys}>\n                  <button\n                    className=\"title-button\"\n                    type=\"button\"\n                    value={keys}\n                    onClick={(e) => setAscendingColumn(e, order)}\n                  >\n                    {keys.toUpperCase()}\n                  </button>\n                </th>\n              );\n            }\n            return null;\n          })}\n        </tr>\n      </thead>\n    );\n  }\n\n  tableBody(resultsByName) {\n    this.residentsIndex = Object.keys(resultsByName[0] || []).findIndex((element) => element === 'residents');\n    this.filmsIndex = Object.keys(resultsByName[0] || []).findIndex((element) => element === 'films');\n    this.urlIndex = Object.keys(resultsByName[0] || []).findIndex((element) => element === 'url');\n\n    return (\n      resultsByName.map((elements) => (\n        <tbody key={elements.name}>\n          <tr>\n            {Object.values(elements).map((values, i) => {\n              if (i !== this.residentsIndex && i !== this.filmsIndex && i !== this.urlIndex) {\n                return (\n                  <td className=\"table-values-content\" key={values}>{values}</td>\n                );\n              }\n              return null;\n            })}\n          </tr>\n        </tbody>\n      ))\n    );\n  }\n\n  render() {\n    const {\n      isFetching, results, getFilterByName, resultsByName, filterOrder,\n    } = this.props;\n    if (isFetching) return <div className=\"loading-page\">LOADING...</div>;\n    const orderedArray = orderColumn(resultsByName, filterOrder.column, filterOrder.order);\n    return (\n      <div>\n        <div className=\"filters-container\">\n          <div>\n            <input\n              className=\"input-name\"\n              type=\"text\"\n              placeholder=\"Digite um nome\"\n              onChange={(e) => getFilterByName(e, results)}\n            />\n          </div>\n          <div className=\"filters-selectors-container\">\n            <label htmlFor=\"values\" className=\"filter-label\">Choose a filter:</label>\n            <div className=\"selectors-container\">\n              <Selectors selects={['population', 'orbital_period', 'diameter', 'rotation_period', 'surface_water']} i={0} />\n              <Selectors selects={['maior que', 'menor que', 'igual a']} i={1} />\n              <div className=\"filter-button-container\">\n                <FilterBox />\n              </div>\n            </div>\n          </div>\n        </div>\n        <table className=\"table-content\">\n          <caption>STAR WARS PLANETS</caption>\n          {this.tableHead(orderedArray)}\n          {this.tableBody(orderedArray)}\n        </table>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  data: {\n    isFetching,\n    results,\n  },\n  table: {\n    resultsByName,\n    filterOrder,\n  },\n}) => ({\n  resultsByName,\n  filterOrder,\n  isFetching,\n  results,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  setAscendingColumn: (event, order) => dispatch(getAscendingColumn(event, order)),\n  setResultsByName: (results) => dispatch(createResults(results)),\n  getCurrentSwPlanets: () => dispatch(fetchSWplanets()),\n  getFilterByName: (event, results) => dispatch(filterByName(event, results)),\n});\n\nTable.propTypes = {\n  setAscendingColumn: PropTypes.func.isRequired,\n  setResultsByName: PropTypes.func.isRequired,\n  getCurrentSwPlanets: PropTypes.func.isRequired,\n  getFilterByName: PropTypes.func.isRequired,\n  isFetching: PropTypes.bool.isRequired,\n  results: PropTypes.instanceOf(Array),\n  filterOrder: PropTypes.instanceOf(Object).isRequired,\n  resultsByName: PropTypes.instanceOf(Array).isRequired,\n};\n\nTable.defaultProps = {\n  results: [],\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Table);\n","import getCurrentSwPlanets from '../../services/swAPI';\n\nexport const REQUEST_SW_PLANETS = 'REQUEST_SW_PLANETS';\nexport const REQUEST_SW_PLANETS_SUCCESS = 'REQUEST_SW_PLANETS_SUCCESS';\nexport const REQUEST_SW_PLANETS_FAILURE = 'REQUEST_SW_PLANETS_FAILURE';\n\n\nconst requestSWplanets = () => ({\n  type: REQUEST_SW_PLANETS,\n});\n\nconst receiveSWplanetsSuccess = ({ results }) => ({\n  type: REQUEST_SW_PLANETS_SUCCESS,\n  results,\n});\n\nconst receiveSWplanetsFailure = (error) => ({\n  type: REQUEST_SW_PLANETS_FAILURE,\n  error,\n});\n\nexport function fetchSWplanets() {\n  return (dispatch) => {\n    dispatch(requestSWplanets());\n\n    return getCurrentSwPlanets()\n      .then(\n        (planets) => dispatch(receiveSWplanetsSuccess(planets)),\n        (error) => dispatch(receiveSWplanetsFailure(error.message)),\n      );\n  };\n}\n","import React from 'react';\nimport './App.css';\nimport Table from './components/Table';\n\nfunction App() {\n  return (\n    <div>\n      <Table />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  REQUEST_SW_PLANETS,\n  REQUEST_SW_PLANETS_SUCCESS,\n  REQUEST_SW_PLANETS_FAILURE,\n} from '../actions';\n\nconst INITIAL_SW_PLANETS_STATE = {\n  isFetching: true,\n  results: [],\n  error: '',\n  filters: [\n    {\n      name: '',\n    },\n  ],\n};\n\nconst data = (state = INITIAL_SW_PLANETS_STATE, action) => {\n  switch (action.type) {\n    case REQUEST_SW_PLANETS:\n      return {\n        ...state,\n        isFetching: true,\n      };\n    case REQUEST_SW_PLANETS_SUCCESS:\n      return {\n        ...state,\n        results: action.results,\n        isFetching: false,\n      };\n    case REQUEST_SW_PLANETS_FAILURE:\n      return {\n        ...state,\n        error: action.error,\n        isFetching: false,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default data;\n","import {\n  COLUMN_VALUES,\n  COMPARISON_VALUES,\n  VALUES,\n  RESET_STATE_SELECTORS,\n} from '../actions/selectors';\n\nconst INITIAL_SELECTOR_STATE = {\n  selectedValues: {\n    column: '',\n    comparison: '',\n    value: 0,\n  },\n};\n\nconst selectors = (state = INITIAL_SELECTOR_STATE, action) => {\n  switch (action.type) {\n    case COLUMN_VALUES: {\n      return {\n        ...state,\n        selectedValues: { ...state.selectedValues, ...action.selectedValues },\n      };\n    }\n    case COMPARISON_VALUES:\n      return {\n        ...state,\n        selectedValues: { ...state.selectedValues, ...action.selectedValues },\n\n      };\n    case VALUES:\n      return {\n        ...state,\n        selectedValues: { ...state.selectedValues, ...action.selectedValues },\n      };\n    case RESET_STATE_SELECTORS:\n      return {\n        ...state,\n        selectedValues: action.selectedValues,\n      };\n    default:\n      return state;\n  }\n};\nexport default selectors;\n","import {\n  FILTER_BY_NAME,\n  CREATE_RESULTS,\n  ADD_FILTERS,\n  REMOVE_FILTER,\n  ASC_DESC_ORDER,\n} from '../actions/table';\n\nimport {\n  numFilters, removeFilters, switchFiltersNum,\n} from '../../services/filters';\n\nfunction filtersValues(filters) {\n  const { comparison, column, value } = filters[filters.length - 1].numeric_values\n    ? filters[filters.length - 1].numeric_values\n    : { comparison: '', column: '', value: 0 };\n  return [comparison, column, value];\n}\n\nfunction caseFilterByName(state, action) {\n  const [, ...rest] = state.filters;\n  const filters = [...action.filters, ...rest];\n  const values = filtersValues(filters);\n  return {\n    ...state,\n    resultsByName: switchFiltersNum(action.results, values[0], values[1], values[2], filters),\n    filters,\n  };\n}\n\nfunction caseRemoveFilter(state, action) {\n  const filters = removeFilters(action.index, state.filters);\n  const values = filtersValues(filters);\n  const resultsByName = switchFiltersNum(\n    action.results, values[0], values[1], values[2], filters,\n  );\n  return {\n    ...state,\n    resultsByName,\n    filters,\n  };\n}\n\nconst INITIAL_SW_PLANETS_STATE = {\n  resultsByName: [],\n  filterOrder: {\n    column: 'name',\n    order: 'ASC',\n  },\n  filters: [\n    {\n      name: '',\n    },\n  ],\n};\n\nconst table = (state = INITIAL_SW_PLANETS_STATE, action) => {\n  switch (action.type) {\n    case CREATE_RESULTS:\n      return {\n        ...state,\n        resultsByName: action.results,\n      };\n    case FILTER_BY_NAME: {\n      return caseFilterByName(state, action);\n    }\n    case ADD_FILTERS: {\n      const filters = [...state.filters, ...action.filters];\n      return {\n        ...state,\n        resultsByName: numFilters(action.results, filters, action.resultsByName),\n        filters,\n      };\n    }\n    case REMOVE_FILTER: {\n      return caseRemoveFilter(state, action);\n    }\n    case ASC_DESC_ORDER: {\n      return {\n        ...state,\n        filterOrder: action.filter,\n      };\n    }\n    default:\n      return state;\n  }\n};\n\nexport default table;\n","import { combineReducers } from 'redux';\nimport data from './swPlanets';\nimport selectors from './selectors';\nimport table from './table';\n\nconst rootReducer = combineReducers({\n  data,\n  selectors,\n  table,\n});\n\nexport default rootReducer;\n","import { applyMiddleware, createStore } from 'redux';\nimport thunk from 'redux-thunk';\nimport reducer from './reducers';\n\nconst store = createStore(reducer, applyMiddleware(thunk));\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>, document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}